1,###新的生命周期
,class A extends React.Component {
  // 用于初始化 state
  constructor() {}
  // 用于替换 `componentWillReceiveProps` ，该函数会在初始化和 `update` 时被调用
  // 因为该函数是静态函数，所以取不到 `this`
  // 如果需要对比 `prevProps` 需要单独在 `state` 中维护
  static getDerivedStateFromProps(nextProps, prevState) {}
  // 判断是否需要更新组件，多用于组件性能优化
  shouldComponentUpdate(nextProps, nextState) {}
  // 组件挂载后调用
  // 可以在该函数中进行请求或者订阅
  componentDidMount() {}
  // 用于获得最新的 DOM 数据
  getSnapshotBeforeUpdate() {}
  // 组件即将销毁
  // 可以在此处移除订阅，定时器等等
  componentWillUnmount() {}
  // 组件销毁后调用
  componentDidUnMount() {}
  // 组件更新后调用
  componentDidUpdate() {}
  // 渲染组件函数
  render() {}
  // 以下函数不建议使用
  UNSAFE_componentWillMount() {}
  UNSAFE_componentWillUpdate(nextProps, nextState) {}
  UNSAFE_componentWillReceiveProps(nextProps) {}
}
--------------------------------------------------------------------------------
2,###router的使用
给Link组件加上replace,可以防止路由重复点击报错,官方暂不修复这个BUG
--------------------------------------------------------------------------------
3,###react hooks里清除setInterval/setTimeout
import React, { useEffect, useRef } from 'react';
const [codeOldBtnText, setCodeOldBtnText] = useState('获取验证码');
useEffect(() => {
    //在useEffect中返回一个方法,会在组件卸载时执行
    return () => { clearInterval(intervalRef.current); };//这里很关键
}, []);
const btnChangeFunc = () => {
    let count = 60;
    let intervalId = setInterval(() => {
        let btnText = '';
        if (count > 0) {
            count = count - 1;
            btnText = count + 's后重新获取';
        }
        if (count === 0) {
            clearInterval(intervalId);
            btnText = '获取验证码';
        }
        setCodeOldBtnText(btnText);
    }, 1000);
    intervalRef.current = intervalId;//这里很关键
};
btnChangeFunc();
